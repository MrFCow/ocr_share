{"version":3,"sources":["components/DragDrawBox.js","components/Camera.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","createUseStyles","root","width","height","display","justifyContent","alignItems","box","backgroundColor","resultSpan","marginTop","worker","createWorker","logger","m","console","log","DragDrawBox","props","classes","useState","startX","startY","endX","endY","pos","setPos","detectedText","setDetectedText","bind","useDrag","down","movement","movX","movY","offset","initial","initX","initY","delay","doOCR","img","a","load","loadLanguage","initialize","recognize","rectangle","top","Math","min","left","abs","text","data","className","style","touchAction","position","onClick","e","navigator","share","error","message","flexDirection","span","videoConstraints","facingMode","WebCamWithChildren","setImg","webcamRef","useRef","capture","useCallback","imageSrc","current","getScreenshot","background","React","cloneElement","children","audio","ref","screenshotFormat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d403b344.chunk.js","sourcesContent":["import React, {useState, useCallBack} from 'react';\r\nimport { useDrag } from 'react-use-gesture';\r\nimport {createUseStyles} from 'react-jss';\r\nimport { createWorker } from 'tesseract.js';\r\n\r\nconst useStyles = createUseStyles({\r\n  root: {\r\n\t\twidth:320,\r\n\t\theight:320,\r\n\t\tdisplay:\"flex\",\r\n\t\tjustifyContent:\"center\",\r\n\t\talignItems:\"center\",\t\t\r\n\t},\r\n\tbox: {\r\n\t\tbackgroundColor: \"rgba(0,155,0,0.5)\",\r\n\t},\r\n\tresultSpan:{\r\n\t\tmarginTop: 5,\r\n\t},\r\n})\r\n\r\n\r\nconst worker = createWorker({\r\n\tlogger: m => console.log(m),\r\n});\r\n\r\nexport default function DragDrawBox(props){\r\n\tconst classes = useStyles();\r\n\t// console.log(props)\r\n\r\n\tconst [pos, setPos] = useState({\r\n\t\tstartX:0,\r\n\t\tstartY:0,\r\n\t\tendX:0,\r\n\t\tendY:0,\r\n\t});\r\n\r\n\tconst [detectedText, setDetectedText] = useState(null);\r\n\r\n  const bind = useDrag(({ down, movement: [movX, movY], offset: [offX, offY], initial: [initX, initY] }) => {\r\n\t\t// console.log(\"init\", initX,initY);\r\n\t\t// console.log(\"mov\", movX,movY);\r\n\t\t// console.log(\"off\", offX,offY);\r\n\t\tsetPos({...pos, startX:initX, startY:initY, endX: initX+movX, endY: initY+movY});\r\n\t\tsetDetectedText(null);\r\n\t},\r\n\t// options\r\n\t{ \r\n\t\tdelay: true, // allowing click for generated div\r\n\t\t// bounds: { left: 0, right: 320, top: 0, bottom: 320 },\r\n\t}, \r\n\t)\r\n\r\n\tconst doOCR = async (img, pos) => {\r\n\t\tawait worker.load();\r\n\t\tawait worker.loadLanguage('eng');\r\n\t\tawait worker.initialize('eng');\r\n\t\tconst { data: { text } } = await worker.recognize(img, {\r\n\t\t\trectangle: { \r\n\t\t\t\ttop: Math.min(pos.startY, pos.endY), \r\n\t\t\t\tleft: Math.min(pos.startX, pos.endX), \r\n\t\t\t\twidth: Math.abs(pos.endX-pos.startX), \r\n\t\t\t\theight: Math.abs(pos.endY-pos.startY) \r\n\t\t\t}\r\n\t\t});\r\n\t\tconsole.log(`OCR text: ${text}`);\r\n\t\tsetDetectedText(text);\r\n\t\treturn text;\r\n\t};\r\n\r\n\tconst handleClick = (e) => {\r\n\t\tif (props.img){\r\n\t\t\tdoOCR(props.img, pos);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.log(\"image not available\")\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleShare = (e) => {\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tawait navigator.share({ text: detectedText });\r\n\t\t\t\tconsole.log(\"Data was shared successfully\");\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(\"Share failed:\", err.message);\r\n\t\t\t}\r\n\t\t})();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* <div>{JSON.stringify(pos)}</div> */}\r\n\t\t\t<div className={classes.root} {...bind()} style={{touchAction: \"none\"}}>\r\n\t\t\t\t{(pos.startX-pos.endX)*(pos.startY-pos.endY) > 0 ? (<div \r\n\t\t\t\t\tclassName={classes.box} \r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tposition: \"fixed\",\r\n\t\t\t\t\t\twidth: Math.abs(pos.startX - pos.endX), \r\n\t\t\t\t\t\theight: Math.abs(pos.startY - pos.endY),\r\n\t\t\t\t\t\tleft: Math.min(pos.startX, pos.endX),\r\n\t\t\t\t\t\ttop: Math.min(pos.startY, pos.endY),\r\n\t\t\t\t\t\t// transform: `translate3d(${pos.startX}px, ${pos.startY}px, 0)` // not needed\r\n\t\t\t\t\t}}\r\n\t\t\t\t\t// onClick={()=>console.log(\"clicked\")}\r\n\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t/>) : null}\r\n\t\t\t</div>\r\n\t\t\t{detectedText ? ( \r\n\t\t\t\t<>\r\n\t\t\t\t\t<span className={classes.resultSpan}>\r\n\t\t\t\t\t\tDetected Text: {detectedText}\r\n\t\t\t\t\t\t<button onClick={handleShare}>Share</button>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</>\r\n\t\t\t): (\r\n\t\t\t\t<span className={classes.resultSpan}>No Detected Text!</span>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}","import React, {useState, useRef, useCallback} from 'react';\r\nimport Webcam from \"react-webcam\";\r\n\r\nimport {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  root: {\r\n\t\tdisplay:\"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t\tjustifyContent:\"center\",\r\n\t\talignItems:\"center\"\r\n\t},\r\n\tspan: {\r\n\t\tmarginTop:30,\r\n\t}\r\n})\r\n\r\nconst videoConstraints = {\r\n  width: 320,\r\n  height: 320,\r\n  facingMode: \"environment\" // or \"user\" = front\r\n};\r\n\r\nexport default function WebCamWithChildren(props){\r\n\tconst classes = useStyles();\r\n\r\n\tconst [img, setImg] = useState(null);\r\n\tconst webcamRef = useRef(null);\r\n\t\r\n  const capture = useCallback(\r\n    () => {\r\n\t\t\tconst imageSrc = webcamRef.current.getScreenshot();\r\n\t\t\t// console.log(imageSrc)\r\n\t\t\tsetImg(imageSrc);\r\n    },\r\n    [webcamRef]\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n\t\t\t{!img? (\r\n\t\t\t\t<Webcam\r\n\t\t\t\t\taudio={false}\r\n\t\t\t\t\theight={320}\r\n\t\t\t\t\tref={webcamRef}\r\n\t\t\t\t\tscreenshotFormat=\"image/jpeg\"\r\n\t\t\t\t\twidth={320}\r\n\t\t\t\t\tvideoConstraints={videoConstraints}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t// <img src={img}/>\r\n\t\t\t\t<div style={{width:320, height:320, background:`url(${img})`}}>\r\n\t\t\t\t\t{React.cloneElement(props.children, { img: img })}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<span className={classes.span}>\r\n      \t<button  onClick={capture}>Capture photo</button>\r\n\t\t\t\t<button  onClick={()=>setImg(null)}>Clear</button>\r\n\t\t\t</span>\r\n    </div>\r\n  );\r\n};","import React from 'react';\nimport DragDrawBox from './components/DragDrawBox';\nimport WebCam from './components/Camera';\n\nfunction App() {\n  return (\n    <WebCam>\n      <DragDrawBox/>\n    </WebCam>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}